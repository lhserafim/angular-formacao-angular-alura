1.  RODANDO O BACKEND
    1.1.    Baixar o arquivo com o desenvolvimento do backend https://github.com/alura-cursos/angular_formularios/archive/main.zip
    1.2.    Após descompactar a pasta, entre pela sua linha de comando na pasta api, use o comando npm i, para instalar as dependências do back-end, 
            e execute-o com o comando npm start. O back-end deve ser executado durante os nossos exercícios.
2.  CRIANDO O PROJETO ANGULAR
    2.1.    Criar o novo projeto, utilizando o CLI do angular: ng new gatitobook --strict
    DICA:   O --strict é uma flag que "ativa" validações do TypeScript (https://angular.io/guide/strict-mode), tais como: forceConsistentCasingInFileNames, 
            noImplicitReturns, noFallthroughCasesInSwitch
    2.2.    Escolher router = y e CSS
3.  INSTALANDO BOOTSTRAP E FONT AWESOME
    3.1.    Dentro do diretório da aplicação, entrar com o comando: npm i bootstrap font-awesome
    3.2.    Em seguida, para utilizar estas 2 bibliotecas, temos que incorporar o CSS ao CSS global do angular
        3.2.1.  Em angular.json, atulizar o styles:
                Ex.:
                "styles": [
                    "src/styles.css",
                    "./node_modules/bootstrap/dist/css/bootstrap.min.css",
                    "./node_modules/font-awesome/css/font-awesome.css"
                ],
4.  CRIANDO O MÓDULO HOME
    4.1.    Vamos criar o módulo home, para que seja possível implementar o roteamento lazy posteriormente.
            O módulo é a principal forma de organizar o código em uma aplicação angular.
            Por convenção, chamamos este módulo de FEATURE MODULE e todos os componentes relativos a home estarão neste componente
    4.2.    Para criar um módulo, já com as configurações de rota, digitar: ng g module home --routing
5.  CRIANDO O COMPONENTE HOME
    5.1.    Para criar o componente: ng g c home
    DICA:   Mesmo sem informar o /home o angular colocou os componentes dentro do mesmo diretório do módulo home
    IMPORTANTE: Toda vez que eu crio um componente novo eu devo declará-lo no meu módulo. Mas o angular faz isso sozinho
6.  TEMPLATE E ASSETS
    6.1.    Por default (angular.json), o angular mantem os assets do projeto em: 
            "assets": [
              "src/favicon.ico",
              "src/assets"
            ],
    6.2.    Vou criar meu HTML customizado dentro de home.component.html            
7.  EXPONDO O COMPONENTE (DESNECESSÁRIO SE USARMOS ROTAS)
    IMPORTANTE: Os passos abaixo são usados quando não utilizamos rotas
    7.1.    Como o componente está dentro de um módulo, precisamos "expor" este componente
        7.1.1.  Se nós não expormos ele, teremos o erro:
                Ex.:
                'app-home' is not a known element:
        7.1.2.  Para expor, vamos fazer no módulo "pai" do componente                
    7.2.    Em home.module.ts, vamos exportar o módulo, adicionando o exports
            Ex.:
            exports: [
                HomeComponent
            ]
    7.3.    Em app.module.ts, adicionar aos imports o HomeModule, que expôs o HomeComponent
    7.4.    Com isso, posso ir em app.component.html e chamar <app-home> que é o seletor do componente
8.  ORGANIZANDO AS ROTAS COM LAZY LOAD
    IMPORTANTE: Vamos subistituir o que foi feito no item 7, para usar rotas com lazy load
    8.1.    Em app.component.html, vamos retirar o acesso direto ao componente (<app-home>) e vamos trocar por uma diretiva que indica que
            serão renderizados componentes por uma rota. Por isso usamos <router-outlet></router-outlet>
    8.2.    Também não é necessário importar o módulo HomeModule em app.module.ts
    8.3.    Em app-routing.module.ts, configurar o array de rotas       
            Ex.:
            const routes: Routes = [
                { path: '', redirectTo: 'home', pathMatch: 'full'},
                { path: 'home', loadChildren: () => import('./home/home.module').then(m => m.HomeModule) },
            ];
    8.4.    Por fim, em home-routing.module.ts, configurar a rota do componente home
            Ex.:
            const routes: Routes = [
                { path: '', component: HomeComponent }
            ];    
9.  INTERFACE DE LOGIN
    9.1.    O componente login faz parte do módulo home
    9.2.    Usar o angular CLI e digitar: ng g c home/login
        9.2.1.  Como foi criado dentro de home, o angular já faz atualiza o home.module.ts: UPDATE src/app/home/home.module.ts (566 bytes)
    9.3.    Dentro de login.component.html, criar o código template (html)
    9.4.    Em home.component.html, para chamar o login.component.html, pela rota, utilizar o router-outlet
            Ex.:
            <div class="col-md-6">
                <!-- A diretiva router-outlet foi colocada aqui para que o Angular renderize o componente pelas rotas -->
                <router-outlet></router-outlet>                
            </div>
    9.5.    Configurar a rota para este novo component dentro do arquivo de rotas do módulo: home-routing.module.ts
        9.5.1.  Neste arquivo, criar uma rota filha para a rota existente
                Ex.:
                const routes: Routes = [
                    { path: '', component: HomeComponent, children: [{path: '', component: LoginComponent}] }
                ];  
10. SERVIÇO DE AUTENTICAÇÃO
    10.1.   Um local correto para colocar as regras de negócio no angular é nos services.
    DICA:   Uma boa prática é colocar o serviço em um módulo separado
    10.2.   Vamos criar um módulo e colocar o serviço dentro dele.
        10.2.1. Gerando o módulo: ng g m autenticacao
        10.2.2. Gerando o service: ng g s autenticacao/autenticacao
    10.3.   Uma vez criado o serviço, vamos utilizar a injeção de dependência para se comunicar com o backend
    10.4.   Em autenticacao.service.ts, injetar o HttpClient
            Ex.:
            constructor(private httpClient: HttpClient) { }
    10.5.   E criar o método autenticar que irá fazer um post no endpoint
            Ex.:
            autenticar(usuario: string, senha: string): Observable<any> {
                // O método post espera a url e o body como parâmetros
                return this.httpClient.post('http://localhost:3000/user/login', {
                userName: usuario,
                password: senha,
                });
            }
    10.6.   Agora o método precisa ser chamado pelo componente
11. FORMULÁRIOS TEMPLATE-DRIVEN
    11.1.   O angular pois duas maneiras de tratar formulários, temos o Template-Driven e os Reactive-Forms
        11.1.   No formulário do login, que é mais simples, vamos utilizar o Template-Driven
        11.2.   No template-driven, a maior parte do código fica no template (html)
    IMPORTANTE: Para utilizar o template-driven, precisamos importar o módulo FormsModule
    11.2.   Em home.module.ts, em imports, importar FormsModule
    11.3.   Em seguida, vamos acessar o login.component.html e vamos adequa-lo com as diretivas do angular
        11.3.1. Adicionar o event bind (ngSubmit) chamando o método de login()
        11.3.2. Também vamos adicionar ao input uma diretiva two way data bind [(ngModel)] para os campos de formulário usuário e senha
            11.3.2.1.   Com esta diretiva, faremos a comunicação entre formulário e classe
            11.3.2.2.   Como estou usando o template-driven, utilizo a diretiva ngModel para passar o valor do input para
                        os atributos da classe 
    11.4.   Em login.component.ts, criar os atributos usuario e senha e o método login()
12. CONSUMINDO O SERVIÇO DE AUTENTICAÇÃO
    12.1.   Primeiramente, em app.module.ts, importar o HttpClientModule
    12.2.   Vamos conectar nosso formulário ao nosso serviço de autenticacao. Em login.component.ts, vamos injetar o serviço
            AutenticacaoService no constructor
            Ex.:
            constructor(private authService: AutenticacaoService) { }
    12.3.   Feita a injeção, já posso chamar o método autenticar, que foi criado no serviço e fazer o subscribe no observable que é retornado
            no método autenticar do service.
            O subscribe chama 2 funções, uma para o sucesso e uma para o erro e posso chamá-las conforme exemplo
            Ex.:
            login() {
                this.authService.autenticar(this.usuario, this.senha).subscribe(() => {
                        console.log('Autenticado com sucesso');
                    },(error) => {
                        alert('Usuário ou senha inválido');
                    });
            }
13. REDIRECIONANDO A ROTA
    13.1.   Vamos criar uma novo módulo e uma nova rota para este módulo
    13.2.   Digitar: ng g m animais --routing
    13.3.   Criar o componente lista de animais: ng g c animais/lista-animais
    13.4.   Agora, adicionar ao arquivo de rotas raiz app-routing.module.ts a rota para o novo módulo
            Ex.:
            { path: 'animais', loadChildren: () => import('./animais/animais.module').then(m => m.AnimaisModule) },
    13.5.   Agora ir no arquivo de rotas do módulo animais-routing.module.ts e adicionar a rota
            Ex.:
            { path: '', component: ListaAnimaisComponent }
    13.6.   Agora vamos alterar o nosso componente login.component.ts, para redirecionar para este componente caso tenha sucesso no login. 
            Para isso iremos utilizar o serviço.
        13.6.1. No construtor, importar o serviço de router
                Ex.:
                constructor(private router: Router) { }
        13.6.2. Criar um método utilizando o router, para redirecionar para o novo componente.
                Ex.:
                ...
                this.router.navigate(['animais']); // Também poderia usar o navigateByUrl
14. COMPONENTE DE MENSAGEM
    14.1.   Vamos criar módulo e um componente mensagem que poderá ser reutilizado na nossa aplicação
    14.2.   No mensagem.component.html, adicionar o nosso template, com o atributo {{mensagem}}
    14.3.   Na classe mensagem.component.ts, adicionar o decorator @Input() ao atributo mensagem e interpolá-lo com o template
    IMPORTANTE: Como este componente não tem rota para acesso, devo fazer a exportação do mesmo
    14.4.   Em mensagem.module.ts, fazer o export do componente
            Ex.:
            exports: [
                MensagemComponent // é necessário exportar este componente
            ]
15. VALIDAÇÕES DE CAMPOS
    15.1.   Vamos importar o componente no nosso módulo de home, em home.module.ts. Para isso adicionar ao array de imports o MensagemModule
    15.2.   Como estamos utilizando o template-driven, a maior parte das regras fica no template (html)
    15.3.   Em login.component.html, vamos adicionar o elemento <app-mensagem>, para chamar o componente
    15.4.   Para enviar a mensagem para este componente, nós iremos usar o atributo mensagem, que tem o decorator @Input
        15.4.1. Por ter este atributo com decorator, podemos colocá-lo como atributo no meu elemento
                Ex.:
                <app-mensagem mensagem="Usuário Obrigatório"></app-mensagem>
        IMPORTANTE! Aqui o texto está ficando fixo na tela e precisamos implementar uma lógica para sumir com a mensagem quando o usuário for informado
    15.5.   Para poder criar uma lógica que irá exibir/ocultar automaticamente o componente mensagem, precisamos de 3 coisas
        15.5.1. Ler o ESTADO do elemento <input>, usando # + ngModel
            15.5.1.2.   #campoUsuario="ngModel"
        15.5.2. Utilizar o atributo html required, para que o HTML marque como inválido caso o campo não esteja preenchido
        15.5.3. Usar a diretiva *ngIf + atributo invalid
                Ex.:
                <app-mensagem  *ngIf="campoUsuario.invalid" mensagem="Usuário Obrigatório"></app-mensagem>
16. VALIDAÇÕES DE FORMULÁRIO
    16.1.   Vamos ativar a validação de campos (acima) apenas quando o usuário passar no campo e não informar nada
        16.1.1. Para isso podemos utilizar o atributo touched junto de invalid, pois o touched retorna verdadeiro se o campo foi "tocado"
                Ex.:
                <app-mensagem  *ngIf="campoUsuario.invalid && campoUsuario.touched" mensagem="Usuário Obrigatório"></app-mensagem>
    16.2.   Vamos deixar o botão desativado enquanto os campos usuário e senha não forem preenchidos
        16.2.1. Como estamos trabalhando com 2 campos do formulário, precisamos criar a variável para pegar o estado no elemento <form>    
                Ex.:
                <form class="form mt-4" (ngSubmit)="login()" #loginForm="ngForm">
        16.2.2. No elemento button, preciso habilitar/desabilitar o botão. Para isso, preciso usar o atributo disabled com uma lógica
                Ou seja, só será disabled, caso o estado do formulário seja inválido
                Ex.:
                <button type="submit" class="btn btn-primary btn-block" [disabled]="loginForm.invalid">Login</button>                
    IMPORTANTE: Quando queremos pegar o estado de um elemento, utilizamos ngModel atribuindo a uma variável com #
                Quando queremos pegar o estado do formulário todo, utilizamos o ngForm atribuindo a uma variável com #
17. ROUTERLINK
    17.1.   Para permitir que o componente navegue para outro, através de um link na tela, utilizamos a diretiva RouterLink
    17.2.   Em login.component.html, criar um link, chamado o RouterLink
            Ex.:
            <p>Não é um usuário?<a [routerLink]="['novousuario']">Se cadastre!</a></p>         
        17.2.1. O RouterLink aponta para um array com o path que eu quero acessar. A vantagem de usar um array ao invés de ="/novousuario", é que o array 
                permite passar parâmetros
18. SERVIÇO DE NOVO USUÁRIO
    18.1.   Criar o serviço: ng g s home/novo-usuario/novo-usuario
    DICA:   É uma boa prática utilizar a capacidade de tipagem do TypeScript que o Angula utiliza, para evitar erros e melhorar o auto complete.
    18.2.   Para isso, vamos criar uma interface TypeScript (model). Digitar: ng g interface home/novo-usuario/novo-usuario. Estamos criando um modelo para 
            poder passar para o backend.
            Ex.:
            export interface NovoUsuario {
                userName: string;
                email:  string;
                fullName: string;
                password: string;
            }
    18.3.   Em novo-usuario.service.ts, por ser um serviço, por padrão injetamos o HttpClient no construtor. 
    18.4.   Criar o método que irá consumir o backend para cadastrar um novo usuário e retornar um observable
            Ex.:
            cadastraNovoUsuario(NovoUsuario: NovoUsuario) {
                // Este método retorna um observable
                return this.httpClient.post("http://localhost:3000/user/signup", NovoUsuario);
            }
19. FORMULÁRIO REATIVO
    19.1.   Neste formulário iremos colocar umas validações mais complexas e por isso vamos utilizar o formulário reativo, onde a maior parte da lógica fica na classe
    19.2.   Em primeiro lugar, em home.module.ts, vamos importar o ReactiveFormsModule (similar ao que foi feito com o FormsModule)
    19.3.   Em novo-usuario.component.ts, vamos criar um atributo que represente o estado do nosso formulário
            Ex.:
            novoUsuarioForm!: FormGroup;
    19.4.   Também vamos fazer a injeção de dependência do FormBuilder no construtor e do nosso serviço de novo usuário
            Ex.:
            constructor(private formBuilder: FormBuilder, private novoUsuarioService: NovoUsuarioService) { }
    19.5.   Vamos construir o objeto novoUsuarioForm e o local correto para isto é no ngOnInit. Isto porque ele é executado logo após a construção com sucesso da classe
            Ex.:
            ngOnInit(): void {
                this.novoUsuarioForm = this.formBuilder.group({
                email: [''],
                fullName: [''],
                userName: [''],
                password: ['']
                })
            }
    19.6.   Em seguida, vamos criar um método que será executado no evento de onSubmit do formulário
            Ex.:
            cadastrar() {
                // getRawValue gera um objeto com o estado das variáveis do novo formulário
                const novoUsuario = this.novoUsuarioForm.getRawValue() as NovoUsuario;
                // as NovoUsuario é um cast e só posso fazê-lo pois os meus elementos de novoUsuarioForm são idênticos a NovoUsuario.ts
            }
    19.7.   Fazer o link da classe como template no novo-usuario.component.html. No elemento form, adicionar:
            Ex.:
            <form class="form mt-4" [formGroup]="novoUsuarioForm" (submit)="cadastrar()">
        19.7.1. A diretiva [formGroup] é para falar que este formulário será representado por um formulário reativo
        19.7.2. "novoUsuarioForm" é para indicar qual é o modelo TypeScript que representa o formulário
        19.7.3. E ao submeter o formulário chamar o método cadastrar()
    19.8.   Fazer o BIND de cada elemento com um elemento do nosso formulário. Para isso utilizamos o atributo FormControlName
            Ex.:
            <input placeholder="e-mail" class="form-control" formControlName="email"/>
20. VALIDAÇÃO PADRÃO
    20.1.   No formulário reativo, todas as definições de validação ficam no componente (classe).
    20.2.   Em novo-usuario.component.ts, dentro do ngOnInit, eu posso adicionar ao array dos atributos um array de validações. Estas validações podem ser customizadas
            ou posso utilizar a classe Validators do Angular.
            Ex.:
            ngOnInit(): void {
                this.novoUsuarioForm = this.formBuilder.group({
                    email: ['', [Validators.required, Validators.email]],
                    fullName: ['', [Validators.required, Validators.minLength(4)]],
                    ...
    20.3.   Com as validações definidas no componente eu vou exibi-las no template
    20.4.   Em novo-usuario.component.html, vou utilizar o componente mensagem <app-mensagem>
        20.4.1. Vou utilizar o ngIf para exibir/ocultar a mensagem
        20.4.2. Vou passar para o atributo mensagem o texto desejado
                Ex.:
                <app-mensagem 
                    *ngIf="
                        novoUsuarioForm.get('email')?.errors?.required && 
                        novoUsuarioForm.get('email')?.touched
                    "
                    mensagem="Email obrigatório"
                >
                </app-mensagem>
    IMPORTANTE! Como utilizamos o método .get() e este pode ser undefined, é IMPORTANTE utilizar o "safe navigation" do TypeScript. Isto irá impedir que façamos a lógica
                em cima de undefined. A expressão safe navigation é representada por ?
    DICA:   Eu posso especificar o tipo do erro (errors?.required) ou deixar genérico (errors?)    
21. VALIDAÇÕES CUSTOMIZADAS
    21.1.   Os formulários reativos permitem que nós implementemos validações customizadas. Para isso, basta criar uma função, retornando um objeto com valor boolean
    21.2.   Preciso criar um arquivo ts, para criar a função dentro
        21.2.1. Criar o arquivo minusculo.validator.ts, dentro do diretório do componente novo-usuario, e criar a função minusculoValidator
                Ex.:
                export function minusculoValidator(control: AbstractControl) {
                    const valor = control.value as string; // Fiz o cast para string para o TS entender e habilitar o autocomplete
                    if (valor !== valor.toLowerCase()) {
                        return { minusculo: true }; // este atributo deste objeto (minusculo) é o que será passado no template
                    } else {
                        return null;
                    }
                }
    IMPORTANTE! minusculo é o atributo do objeto e este nome é que será passado na validação no template
    21.3.   Retornar a classe do componente e passar a validação como array de validação
            Ex.:
            userName: ['', [minusculoValidator]],
    21.4.   Chamar a função no template, da mesma forma que chamamos uma validação padrão
22. VALIDAÇÕES ASSÍNCRONAS
    22.1.   Em algumas situações precisamos validar um dado que não está no nosso formulário, como um login de usuário por exemplo, neste caso
            devemos utilizar validações assíncronas
    22.2.   Em novo-usuario.service.ts, criar um novo método para consultar o usuário
            Ex.:
            verificaUsuarioExistente(nomeUsuario: String) {
                return this.httpClient.get(`http://localhost:3000/users/exists/${nomeUsuario}`);
            }
    22.3.   Para não misturar as regras de negócio, vamos criar um novo service para esta consulta. Digitar: ng g s home/novo-usuario/usuario-existe
    22.4.   Em usuario-existe.service.ts, vamos injetar o nosso serviço de novo-usario no construtor
            Ex.:
            constructor(private novoUsuarioService: NovoUsuarioService) { }
    22.4.   Em seguida criar o método assíncrono que irá capturar o fluxo da digitação e validar se o usuário existe no backend usuarioJaExiste()
    22.5.   Voltar para o componente novo-usuario.component.ts e injetar no construtor o serviço criado
            Ex.:
            private usuarioExistenteService: UsuarioExisteService
    22.6.   Em seguida, adicionar o array de validação ao atributo userName.
            IMPORTANTE! O array de validação assíncrona precisa estar na terceira posição 
            Ex.:
            userName: ['', [minusculoValidator], [this.usuarioExistenteService.usuarioJaExiste()]],
    22.7.   Em novo-usuario.component.html, abaixo do userName, colocar outro <app-message>, para chamar o método de validação assíncrona
            Ex.:
            <app-mensagem
                *ngIf="
                    novoUsuarioForm.get('userName')?.errors?.usuarioExistente
                "
                mensagem="Usuário já existe"
            >
            </app-mensagem>  
    DICA:   Usar o debounceTime() para evitar reduzir o número de requisições no backend (https://stackoverflow.com/questions/50739211/how-to-use-debouncetime-in-an-angular-component)