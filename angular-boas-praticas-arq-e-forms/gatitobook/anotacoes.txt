1.  RODANDO O BACKEND
    1.1.    Baixar o arquivo com o desenvolvimento do backend https://github.com/alura-cursos/angular_formularios/archive/main.zip
    1.2.    Após descompactar a pasta, entre pela sua linha de comando na pasta api, use o comando npm i, para instalar as dependências do back-end, 
            e execute-o com o comando npm start. O back-end deve ser executado durante os nossos exercícios.
2.  CRIANDO O PROJETO ANGULAR
    2.1.    Criar o novo projeto, utilizando o CLI do angular: ng new gatitobook --strict
    DICA:   O --strict é uma flag que "ativa" validações do TypeScript (https://angular.io/guide/strict-mode), tais como: forceConsistentCasingInFileNames, 
            noImplicitReturns, noFallthroughCasesInSwitch
    2.2.    Escolher router = y e CSS
3.  INSTALANDO BOOTSTRAP E FONT AWESOME
    3.1.    Dentro do diretório da aplicação, entrar com o comando: npm i bootstrap font-awesome
    3.2.    Em seguida, para utilizar estas 2 bibliotecas, temos que incorporar o CSS ao CSS global do angular
        3.2.1.  Em angular.json, atulizar o styles:
                Ex.:
                "styles": [
                    "src/styles.css",
                    "./node_modules/bootstrap/dist/css/bootstrap.min.css",
                    "./node_modules/font-awesome/css/font-awesome.css"
                ],
4.  CRIANDO O MÓDULO HOME
    4.1.    Vamos criar o módulo home, para que seja possível implementar o roteamento lazy posteriormente.
            O módulo é a principal forma de organizar o código em uma aplicação angular.
            Por convenção, chamamos este módulo de FEATURE MODULE e todos os componentes relativos a home estarão neste componente
    4.2.    Para criar um módulo, já com as configurações de rota, digitar: ng g module home --routing
5.  CRIANDO O COMPONENTE HOME
    5.1.    Para criar o componente: ng g c home
    DICA:   Mesmo sem informar o /home o angular colocou os componentes dentro do mesmo diretório do módulo home
    IMPORTANTE: Toda vez que eu crio um componente novo eu devo declará-lo no meu módulo. Mas o angular faz isso sozinho
6.  TEMPLATE E ASSETS
    6.1.    Por default (angular.json), o angular mantem os assets do projeto em: 
            "assets": [
              "src/favicon.ico",
              "src/assets"
            ],
    6.2.    Vou criar meu HTML customizado dentro de home.component.html            
7.  EXPONDO O COMPONENTE (DESNECESSÁRIO SE USARMOS ROTAS)
    IMPORTANTE: Os passos abaixo são usados quando não utilizamos rotas
    7.1.    Como o componente está dentro de um módulo, precisamos "expor" este componente
        7.1.1.  Se nós não expormos ele, teremos o erro:
                Ex.:
                'app-home' is not a known element:
        7.1.2.  Para expor, vamos fazer no módulo "pai" do componente                
    7.2.    Em home.module.ts, vamos exportar o módulo, adicionando o exports
            Ex.:
            exports: [
                HomeComponent
            ]
    7.3.    Em app.module.ts, adicionar aos imports o HomeModule, que expôs o HomeComponent
    7.4.    Com isso, posso ir em app.component.html e chamar <app-home> que é o seletor do componente
8.  ORGANIZANDO AS ROTAS COM LAZY LOAD
    IMPORTANTE: Vamos subistituir o que foi feito no item 7, para usar rotas com lazy load
    8.1.    Em app.component.html, vamos retirar o acesso direto ao componente (<app-home>) e vamos trocar por uma diretiva que indica que
            serão renderizados componentes por uma rota. Por isso usamos <router-outlet></router-outlet>
    8.2.    Também não é necessário importar o módulo HomeModule em app.module.ts
    8.3.    Em app-routing.module.ts, configurar o array de rotas       
            Ex.:
            const routes: Routes = [
                { path: '', redirectTo: 'home', pathMatch: 'full'},
                { path: 'home', loadChildren: () => import('./home/home.module').then(m => m.HomeModule) },
            ];
    8.4.    Por fim, em home-routing.module.ts, configurar a rota do componente home
            Ex.:
            const routes: Routes = [
                { path: '', component: HomeComponent }
            ];    
9.  INTERFACE DE LOGIN
    9.1.    O componente login faz parte do módulo home
    9.2.    Usar o angular CLI e digitar: ng g c home/login
        9.2.1.  Como foi criado dentro de home, o angular já faz atualiza o home.module.ts: UPDATE src/app/home/home.module.ts (566 bytes)
    9.3.    Dentro de login.component.html, criar o código template (html)
    9.4.    Em home.component.html, para chamar o login.component.html, pela rota, utilizar o router-outlet
            Ex.:
            <div class="col-md-6">
                <!-- A diretiva router-outlet foi colocada aqui para que o Angular renderize o componente pelas rotas -->
                <router-outlet></router-outlet>                
            </div>
    9.5.    Configurar a rota para este novo component dentro do arquivo de rotas do módulo: home-routing.module.ts
        9.5.1.  Neste arquivo, criar uma rota filha para a rota existente
                Ex.:
                const routes: Routes = [
                    { path: '', component: HomeComponent, children: [{path: '', component: LoginComponent}] }
                ];  
10. SERVIÇO DE AUTENTICAÇÃO
    10.1.   Um local correto para colocar as regras de negócio no angular é nos services.
    DICA:   Uma boa prática é colocar o serviço em um módulo separado
    10.2.   Vamos criar um módulo e colocar o serviço dentro dele.
        10.2.1. Gerando o módulo: ng g m autenticacao
        10.2.2. Gerando o service: ng g s autenticacao/autenticacao
    10.3.   Uma vez criado o serviço, vamos utilizar a injeção de dependência para se comunicar com o backend
    10.4.   Em autenticacao.service.ts, injetar o HttpClient
            Ex.:
            constructor(private httpClient: HttpClient) { }
    10.5.   E criar o método autenticar que irá fazer um post no endpoint
            Ex.:
            autenticar(usuario: string, senha: string): Observable<any> {
                // O método post espera a url e o body como parâmetros
                return this.httpClient.post('http://localhost:3000/user/login', {
                userName: usuario,
                password: senha,
                });
            }
    10.6.   Agora o método precisa ser chamado pelo componente
11. FORMULÁRIOS TEMPLATE-DRIVEN
    11.1.   O angular pois duas maneiras de tratar formulários, temos o Template-Driven e os Reactive-Forms
        11.1.   No formulário do login, que é mais simples, vamos utilizar o Template-Driven
        11.2.   No template-driven, a maior parte do código fica no template (html)
    IMPORTANTE: Para utilizar o template-driven, precisamos importar o módulo FormsModule
    11.2.   Em home.module.ts, em imports, importar FormsModule
    11.3.   Em seguida, vamos acessar o login.component.html e vamos adequa-lo com as diretivas do angular
        11.3.1. Adicionar o event bind (ngSubmit) chamando o método de login()
        11.3.2. Também vamos adicionar ao input uma diretiva two way data bind [(ngModel)] para os campos de formulário usuário e senha
            11.3.2.1.   Com esta diretiva, faremos a comunicação entre formulário e classe
            11.3.2.2.   Como estou usando o template-driven, utilizo a diretiva ngModel para passar o valor do input para
                        os atributos da classe 
    11.4.   Em login.component.ts, criar os atributos usuario e senha e o método login()
12. CONSUMINDO O SERVIÇO DE AUTENTICAÇÃO
    12.1.   Primeiramente, em app.module.ts, importar o HttpClientModule
    12.2.   Vamos conectar nosso formulário ao nosso serviço de autenticacao. Em login.component.ts, vamos injetar o serviço
            AutenticacaoService no constructor
            Ex.:
            constructor(private authService: AutenticacaoService) { }
    12.3.   Feita a injeção, já posso chamar o método autenticar, que foi criado no serviço e fazer o subscribe no observable que é retornado
            no método autenticar do service.
            O subscribe chama 2 funções, uma para o sucesso e uma para o erro e posso chamá-las conforme exemplo
            Ex.:
            login() {
                this.authService.autenticar(this.usuario, this.senha).subscribe(() => {
                        console.log('Autenticado com sucesso');
                    },(error) => {
                        alert('Usuário ou senha inválido');
                    });
            }
